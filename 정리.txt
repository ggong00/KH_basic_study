-퀴즈-
1.예외처리란?
오류 : 개발자가 코드상으로 처리할 수 없는 오류 (시스템, 네트워크장애 , 하드웨어적인 장애)
예외 : 개발자가 코드상으로 처리할 수 있는 오류
예외원인 : 개발자의 코드 작성에서 빚어진 실수
		프로그램 논리흐름상 필요에 의해 의도적으로 예외를 발생
예외처리목적 : 프로그램의 비정상적인 종료없이 정상적으로 작동하도록 하기위함.

2.checked exception & unchecked exception 차이
checked exception : RuntimeException을 상속하지 않은 Exception
					컴파일전에 문법적 오류가 생겨 강제로 예외처리 해야한다.
unchecked exception : RuntimeException을 상속한 Exception
					컴파일 시점에 예외처리를 강제하지 않는다.
					런타임시점에서 예외가 발생할 수 있다.
					예외발생시 예외를 처리하지 않으면 자동 위임한다.
					프로그래머 역량에 의존적이다.

3.예외처리 하는 방법 2가지?
try catch : 예외가 예상되는 코드를 감싸서 직접 예외처리0 하는 방식.
throws : 위임, 호출한 메소드에서 예외처리를 떠넘기는 방법

4.오버로딩(overloading)이란?
동일한 기능을 하는 같은 이름의 메소드를 매개변수만 다르게 하여 여러개 정의하는 기술

5.오버로딩의 전제조건?
1)메소드이름이 같고(반환타입은 달라도 됨) 매개변수(타입, 갯수, 순서)가 달라야한다.
2)접근제한자는 상관없다

6.오버라이딩(overriding)이란?
클래스간 상속또는 인터페이스 구현클래스에서 상위개념의 메소드를 재정의하는 기술

7.오버라이딩의 성립조건
1)메소드 선언부가 동일해야한다.
2)접근제한자는 같거나 가시범위가 더 넓어야한다.
3)@Override : 오버라이딩 성립조건이 만족하는지를 컴파일시점에 체크

8.생성자의 역할
인터페이스 생성시 호출되어 인스턴스의 속성값을 초기화하는 역할

9.class란?
개념(속성,행위)을 정의하기위해 java언어에서 제공하는 문법

10.interface란?
개념간에 상호작용을 표준화하기위해 java언어에서 제공하는 문법
특징) 1.모든 멤버의 접근제한자는 자동으로 public이 붙는다 (생략하더라도)
	2.멤버 필드는 상수다.(public static final)
	3.행위 표준을 추상메소드로 정의한다.(public abstract 생략가능)
	4.default, static: 유지보수 측면에서 확장용도로 사용됨
	5.인스턴스 생성 불가능
	6.타입으로는 사용할 수 있다.
	
11.final 키워드의 3가지 (변수, 클래스, 메소드) 쓰임?
변수 : 초기값 변경 불가능 
클래스 : 하위개념으로 확장 불가능
메소드 : 재정의 불가능

12.반환문(return)의 용도?
1)return : 메소드 내에서 실행을 종료하고 호출한 메소드로 제어를 넘겨준다. 
2)return + 표현식(값, 변수, 식, 메소드호출) : 메소드내에서 실행을 종료하고 호출한 메소드로 반환값을 넘겨준다.

13.매개변수란?
1)메소드 외부로부터 값을 입력받기위한 용도
2)메소드 바디내에서 지역변수처럼 사용된다.
3)초기화는 메소드 호출할때 이루어진다.

14.지역변수란?
1)메소드 내부에서 선언된 변수
2)생명주기는 블럭내에서만 유효범위를 갖는다.

15.추상클래스란?
미완성 개념정의 
특징) 1.인스턴스 생성 불가능
	2.타입으로는 사용할 수 있다.
	2.추상메소드가 없어도 추상클래스 선언이 가능하다.
	3.추상메소드가 하나라도 있으면 반드시 abstract를 붙여 추상클래스임을 명시적으로 표기한다.
	
16.추상메소드란?
미완성 메소드
특징)1.선언부만 존재하고 구현부가 없다.


17.접근제한자 4가지에 대해 설명하시오
public : 모든 패키지에서 접근가능
protected :	같은 패키지와 다른패키지에 존재하는 하위클래스만 접근가능
default :	같은 패키지에서만 접근가능	
private :	같은 클래스 안에서만 접근가능
//import : 다른패기지에 있는 참조타입을 사용하고자 할때는 import를 사용해야한다.

18.인스턴스 멤버와 정적멤버의 차이?
인스턴스 멤버 :인스턴스 생성 후 사용가능
정적 멤버 :	인스턴스 생성없이 타입.멤버로 접근가능

19.익명클래스를 생성하는 2가지 방법?
//익명객체는 단독으로 생성 불가
1. 클래스 상속해서 생성
2. 인터페이스를 구현해서 생성

20.익명클래스를 사용하는 이유?
1회성 객체 필요시 클래스의 선언과 인스턴스
