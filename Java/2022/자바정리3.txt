예외의 종류
	1. checked exception
	2. unchecked exception

예외발생 원인
	1. 프로그래머의 코딩실수 => jvm이 예외 인스턴스를 생성
	2. 프로그래머가 의도적으로 사용자정의 예외를 정의하고
		throw new 사용자정의예외()
		
사용자정의 예외를 정의하는 방법		
	1. checked exception
		Exception 클래스를 상속받아 정의
	2. unchecked exception
		RuntimeException 클래스를 상속받아 정의
		
배열의 단점
	1. 배열 생성시 결정된 크기가 이후 변동 불가.
	2. null 체크를 통한 성능 저하.

동일객체 , 동등객체

동일객체(물리적) : 주민번호	=> Object.hashCode()
동등객체(논리적) : 이름이 같은, 성별이 같은, 혈액형이 같은. => Object.equals() ==

컬렉션 내에서 객체비교
		1. 사용자정의 클래스에 java.lang.Comparable 인터페이스 구현하기
		=> 개념설계시 기본 정렬기준을 정의, compareTO()
		=> Comparable를 구현하고 있지 않으면 ClassCastException 발생
		
		2. 컬렉션(검색, 정렬) 생성시 생성자 매개값을 java.util.Comparator 구현체 전달하기.
			=> 컬렉션 생성시 비교연산자를 주입하여 정렬기준을 정의하는 방법. compare()